/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
*/
package org.openapitools.api

import org.openapitools.model.Model400Error
import org.openapitools.model.Model401Error
import org.openapitools.model.Model500Error
import org.openapitools.model.SocialLoginUrls
import org.springframework.http.HttpStatus
import org.springframework.http.MediaType
import org.springframework.http.ResponseEntity

import org.springframework.web.bind.annotation.*
import org.springframework.validation.annotation.Validated
import org.springframework.web.context.request.NativeWebRequest
import org.springframework.beans.factory.annotation.Autowired

import jakarta.validation.constraints.DecimalMax
import jakarta.validation.constraints.DecimalMin
import jakarta.validation.constraints.Email
import jakarta.validation.constraints.Max
import jakarta.validation.constraints.Min
import jakarta.validation.constraints.NotNull
import jakarta.validation.constraints.Pattern
import jakarta.validation.constraints.Size
import jakarta.validation.Valid

import kotlin.collections.List
import kotlin.collections.Map

@Validated
@RequestMapping("\${api.base-path:}")
interface SocialLoginApi {


    @RequestMapping(
            method = [RequestMethod.DELETE],
            value = ["/api/v1/users/social_login/{provider}"],
            produces = ["application/json"]
    )
    fun deleteSocialLogin( @PathVariable("provider") provider: kotlin.String): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }


    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/api/v1/users/social_login/urls"],
            produces = ["application/json"]
    )
    fun getSocialLoginUrl(): ResponseEntity<SocialLoginUrls> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }


    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/api/v1/users/social_login/code/{provider}"]
    )
    fun requestAuthorizationCode( @PathVariable("provider") provider: kotlin.String,@NotNull  @Valid @RequestParam(value = "code", required = true) code: kotlin.String, @Valid @RequestParam(value = "state", required = false) state: kotlin.String?): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }


    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/api/v1/users/social_login/login/code/{provider}"]
    )
    fun requestAuthorizationCodeForLogin( @PathVariable("provider") provider: kotlin.String,@NotNull  @Valid @RequestParam(value = "code", required = true) code: kotlin.String, @Valid @RequestParam(value = "state", required = false) state: kotlin.String?, @Valid @RequestParam(value = "login_challenge", required = false) loginChallenge: kotlin.String?): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }
}
